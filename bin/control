#!/bin/bash
set -e

source ${OPENSHIFT_CARTRIDGE_SDK_BASH}

export STOPTIMEOUT=20

PHP_FPM_EXEC=${OPENSHIFT_PHP_VERSION_DIR}/sbin/php-fpm
PHP_FPM_PID=${OPENSHIFT_PHP_DIR}/pid/php-fpm-${OPENSHIFT_GEAR_UUID}.pid

# A map of files that can be configured in the repo.
declare -A CONF_FILES
CONF_FILES=( ['cli/php.ini.erb']='php.ini' ['fpm/php.ini.erb']='php-fpm.ini' ['fpm/php-fpm.conf.erb']='php-fpm.conf' )

function _is_running() {
    if [ -f "${PHP_FPM_PID}" ]; then
        local pid=`cat ${PHP_FPM_PID} 2> /dev/null`
        [ -z "${pid}" ]  &&  return 1

        local current_user=`id -u`
        if `ps --pid ${pid} > /dev/null 2>&1` || \
           `pgrep -x php-fpm -u ${current_user} > /dev/null 2>&1`; then
            return 0
        fi
    fi
    return 1
}

function _configuration_setup() {
    # Install config files
    for file in "${!CONF_FILES[@]}"; do
        local CONF_TARGET_FILE=${CONF_FILES["${file}"]}
        local CONF_FILE=${OPENSHIFT_REPO_DIR}/.openshift/${file}

        # If the plugin is scaling we need to use OPENSHIFT_DEPLOYMENTS_DIR
        if [ ! -f "${CONF_FILE}" ]; then
            CONF_FILE=${OPENSHIFT_DEPLOYMENTS_DIR}/current/repo/.openshift/${file}
        fi

        # If no custom config is used use the default
        if [ ! -f "${CONF_FILE}" ]; then
            CONF_FILE=${OPENSHIFT_PHP_DIR}/conf/${CONF_TARGET_FILE}.erb
        fi

        if [ "$OPENSHIFT_GEAR_DNS" != "$OPENSHIFT_APP_DNS" ]; then
            if [ ! -f "${CONF_FILE}" ]; then
                client_result "No ${CONF_FILE}"
            else
                client_result "Exists ${CONF_FILE}"
            fi

            env >> ${OPENSHIFT_PHP_DIR}/env.log
            (ls -la ${OPENSHIFT_DEPLOYMENTS_DIR}/current/repo || echo "NO ${OPENSHIFT_DEPLOYMENTS_DIR}/current/repo")  >> ${OPENSHIFT_PHP_DIR}/env.log
        fi

        client_result "Installing ${CONF_FILE}"
        oo-erb ${CONF_FILE} > ${OPENSHIFT_PHP_DIR}/conf/${CONF_TARGET_FILE}
    done
}

function start() {
    if ! _is_running; then
        _configuration_setup

        # Start php fpm
        ${PHP_FPM_EXEC} \
            --php-ini "${OPENSHIFT_PHP_DIR}/conf/php-fpm.ini" \
            --fpm-config "${OPENSHIFT_PHP_DIR}/conf/php-fpm.conf" \
            --prefix "${OPENSHIFT_PHP_DIR}"

        _is_running && client_result "PHP-FPM instance is started"
    else
        client_result "PHP-FPM already running" 1>&2
    fi
}


function stop() {
    [ -f "${PHP_FPM_PID}" ] && pid=$( /bin/cat "${PHP_FPM_PID}" )
    if `ps -p ${pid} > /dev/null 2>&1`; then
        /bin/kill ${pid}
        ret=$?
        if [ ${ret} -eq 0 ]; then
            TIMEOUT="${STOPTIMEOUT}"
            while [ ${TIMEOUT} -gt 0 ] && [ -f "${PHP_FPM_PID}" ]; do
                /bin/kill -0 "${pid}" >/dev/null 2>&1 || break
                sleep .5
                let TIMEOUT=${TIMEOUT}-1
            done
        fi
    else
        if `pgrep -x php-fpm > /dev/null 2>&1`
        then
            echo "Warning: PHP-FPM process exists without a pid file.  Use force-stop to kill." 1>&2
        else
            echo "PHP-FPM already stopped" 1>&2
        fi
    fi

    ! _is_running && client_result "PHP-FPM instance is stopped"
}

function restart() {
    stop
    start
}

function reload() {
    restart
}

function status() {
    if _is_running; then
        client_result "PHP-FPM is running"
    else
        client_result "PHP-FPM is stopped"
    fi
}

function build() {
    # Stop fpm if running
    if _is_running; then
        stop
    fi

    # Update configuration
    _configuration_setup

    # Install pecl
    PECL_FILE=${OPENSHIFT_REPO_DIR}/.openshift/php-pecl.txt
    if [ -f ${PECL_FILE} ]; then
        OLDIFS=$IFS
        IFS=$'\n'
        for pecl in $(cat ${PECL_FILE}); do
            if [ ! -z ${pecl} ]; then
                IFS=' ' read -a pecl_args <<< "${pecl}"
                ${OPENSHIFT_PHP_DIR}/bin/install_pecl "${pecl_args[0]}" "${pecl_args[1]}" "${pecl_args[2]}"
            fi
        done
        IFS=${OLDIFS}
    fi

    # Composer self-update
    COMPOSER_PATH=${PHP_VERSION_DIR}/bin/composer
    if [ -f "${COMPOSER_PATH}" ]; then
        ${COMPOSER_PATH} self-update
    fi
}

case "$1" in
  start)     start ;;
  stop)      stop ;;
  restart)   restart ;;
  status)    status ;;
  reload)    reload ;;
  build)     build ;;
  *)         exit 0
esac
